using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Text;

using Fahrenheit.CoreLib;

namespace Fahrenheit.Tools.H2CS;

public record FhSyntaxNode(string Name);
public record FhHeaderGuardNode(string Name);
public record FhDefineNode(string Name, string Value) : FhSyntaxNode(Name);

public record FhHeaderFile(FhHeaderGuardNode HeaderGuardNode, List<FhDefineNode> Defines);

public static class FhHSyntaxExtensions {
    public static bool ConstructDefineNode(this string line, [NotNullWhen(true)] out FhDefineNode? define) {
        FhTokenizer        tokenizer = new FhTokenizer(line.AsSpan(), new char[] { '\t', ' ' });
        ReadOnlySpan<char> deftoken  = tokenizer.GetNextToken();

        if (!deftoken.SequenceEqual("#define")) throw new Exception("FH_E_H2CS_DEFINE_PARSE_FAULT");

        string name  = tokenizer.GetNextToken().Trim().ToString();
        string value = tokenizer.GetNextToken().Trim().ToString();

        if (char.IsDigit(name[0]))
            name = $"_{name}";

        define = new FhDefineNode(name, value);
        return true;
    }

    public static bool ConstructHeaderGuard(this string line, [NotNullWhen(true)] out FhHeaderGuardNode? hg) {
        hg = new FhHeaderGuardNode(line[7..].Trim());
        return true;
    }

    public static bool DefineAlreadyGenerated(this FhDefineNode define, in List<FhDefineNode> defines, [NotNullWhen(true)] out FhDefineNode? dup) {
        dup = default;

        foreach (FhDefineNode node in defines) {
            if (node.Value == define.Value) {
                defines.Add(define);
                dup = node;

                return true;
            }
        }

        defines.Add(define);
        return false;
    }

    public static bool TryEmitHeader(this FhHeaderFile hf, StringBuilder sb) {
        List<FhDefineNode> defineCache = new List<FhDefineNode>();

        sb.AppendLine(H2CSConfig.EmitPrologue 
            ? EmitPrologue(hf.HeaderGuardNode) 
            : EmitDescriptorStart(hf));

        foreach (FhDefineNode define in hf.Defines) {
            sb.AppendLine(DefineAlreadyGenerated(define, defineCache, out FhDefineNode? dup) 
                ? define.EmitDefineSubsequent(dup) 
                : define.EmitDefineFirst());
        }

        sb.AppendLine(H2CSConfig.EmitPrologue 
            ? $"}}\n" 
            : EmitDescriptorEnd(hf));

        return true;
    }

    public static string EmitDefineFirst(this FhDefineNode def) {
        string prefix = def.Name.Contains('-') ? "//" : "";
        return $"    {prefix}{def.Name.ToUpperInvariant()} = {def.Value.ToUpperInvariant().Replace("0X", "0x")},";
    }

    public static string EmitDefineSubsequent(this FhDefineNode def, FhDefineNode dup) {
        if (!H2CSConfig.EmitDeduplicated) return EmitDefineFirst(def);

        string prefix = dup.Name.Contains('-') ? "//" : "";
        return $"    {prefix}{def.Name.ToUpperInvariant()} = {dup.Name.ToUpperInvariant()},";
    }

    public static string EmitPrologue(this FhHeaderGuardNode hg) {
        return $$"""
/* [h2cs {{DateTime.UtcNow.ToString("dd/M/yy HH:mm")}}]
 * This file was generated by Fahrenheit.H2CS (https://github.com/fkelava/fahrenheit/).
 * 
 * Source file: {{Path.GetFileName(H2CSConfig.SrcPath)}}
 * Header name: {{hg.Name}} 
 */

namespace {{H2CSConfig.DefaultNamespace}};

public enum {{Path.GetFileNameWithoutExtension(H2CSConfig.SrcPath)}} : {{H2CSConfig.TypeAliasName}} {
""";
    }

    public static string EmitDescriptorStart(this FhHeaderFile fh) {
        return $$"""
    // [h2cs {{DateTime.UtcNow.ToString("dd/M/yy HH:mm")}}] Header name: {{Path.GetFileNameWithoutExtension(H2CSConfig.SrcPath)}} 
    // --- {{fh.HeaderGuardNode.Name}} START ({{fh.Defines.Count}} entries) ---
""";
    }

    public static string EmitDescriptorEnd(this FhHeaderFile fh) {
        return $"    // --- {fh.HeaderGuardNode.Name} END ---";
    }
}
